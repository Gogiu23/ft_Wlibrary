{"ast":null,"code":"var _jsxFileName = \"/Users/alessandrodominici/ft_Library/ipodwheel/src/components/Wheel.js\";\nimport \"./ipod.css\";\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Wheel() {\n  //const circleRef = useRef(null);\n  //const [currentValue, setCurrentValue] = useState(0);\n  //const [isDragging, setIsDragging] = useState(false);\n  //const startAngleRef = useRef(null);\n  //\n  //const BORDER_WIDTH = 10;\n  //\n  //const getAngle = (x, y, cx, cy) => {\n  //  return Math.atan2(y - cy, x - cx) * (180 / Math.PI);\n  //};\n  //\n  //const isOnBorder = (x, y, rect) => {\n  //  const cx = rect.left + rect.width / 2;\n  //  const cy = rect.top + rect.height / 2;\n  //  const radius = rect.width / 2;\n  //\n  //  const distance = Math.sqrt((x - cx) ** 2 + (y - cy));\n  //  return distance >= radius - BORDER_WIDTH && distance <= radius;\n  //};\n  //\n  //const handleMouseDown = (e) => {\n  //  setIsDragging(true);\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  if (!isOnBorder(e.clientX, e.clientY, rect)) return;\n  //  startAngleRef.current = getAngle(\n  //    e.clientX,\n  //    e.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //};\n  //\n  //const handleMouseMove = (e) => {\n  //  if (!isDragging) return;\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  const currentAngle = getAngle(\n  //    e.clientX,\n  //    e.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //  if (startAngleRef.current !== null) {\n  //    const deltaAngle = currentAngle - startAngleRef.current;\n  //\n  //    if (deltaAngle > 5) {\n  //      setCurrentValue((prev) => prev + 1);\n  //      startAngleRef.current = currentAngle;\n  //    } else if (deltaAngle < -5) {\n  //      setCurrentValue((prev) => prev - 1);\n  //      startAngleRef.current = currentAngle;\n  //    }\n  //  }\n  //};\n  //\n  //const styleCircle = {\n  //  border: `${BORDER_WIDTH}px solid aqua`,\n  //};\n  //\n  //const handleMouseUp = () => {\n  //  setIsDragging(false);\n  //  startAngleRef.current = null;\n  //};\n  //const handleTouchStart = (e) => {\n  //  setIsDragging(true);\n  //\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  const touch = e.touches[0];\n  //  if (!isOnBorder(touch.clientX, touch.clientY, rect)) return;\n  //  startAngleRef.current = getAngle(\n  //    touch.clientX,\n  //    touch.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //};\n  //\n  //const handleTouchMove = (e) => {\n  //  if (!isDragging) return;\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  const touch = e.touches[0];\n  //  const currentAngle = getAngle(\n  //    touch.clientX,\n  //    touch.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //\n  //  if (startAngleRef.current !== null) {\n  //    const deltaAngle = currentAngle - startAngleRef.current;\n  //\n  //    if (deltaAngle > 5) {\n  //      setCurrentValue((prev) => prev + 1);\n  //      startAngleRef.current = currentAngle;\n  //    } else if (deltaAngle < -5) {\n  //      setCurrentValue((prev) => prev - 1);\n  //      startAngleRef.current = currentAngle;\n  //    }\n  //  }\n  //};\n  //\n  //const handleTouchEnd = () => {\n  //  setIsDragging(false);\n  //  startAngleRef.current = null;\n  //};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wheel\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      //{ style={styleCircle} }\n      id: \"circle\",\n      ref: circleRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseUp,\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"number\",\n        children: currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_c = Wheel;\nvar _c;\n$RefreshReg$(_c, \"Wheel\");","map":{"version":3,"names":["useRef","useState","jsxDEV","_jsxDEV","Wheel","className","children","id","ref","circleRef","onMouseDown","handleMouseDown","onMouseMove","handleMouseMove","onMouseUp","handleMouseUp","onMouseLeave","onTouchStart","handleTouchStart","onTouchMove","handleTouchMove","onTouchEnd","handleTouchEnd","currentValue","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessandrodominici/ft_Library/ipodwheel/src/components/Wheel.js"],"sourcesContent":["import \"./ipod.css\";\nimport { useRef, useState } from \"react\";\n\nexport default function Wheel() {\n  //const circleRef = useRef(null);\n  //const [currentValue, setCurrentValue] = useState(0);\n  //const [isDragging, setIsDragging] = useState(false);\n  //const startAngleRef = useRef(null);\n  //\n  //const BORDER_WIDTH = 10;\n  //\n  //const getAngle = (x, y, cx, cy) => {\n  //  return Math.atan2(y - cy, x - cx) * (180 / Math.PI);\n  //};\n  //\n  //const isOnBorder = (x, y, rect) => {\n  //  const cx = rect.left + rect.width / 2;\n  //  const cy = rect.top + rect.height / 2;\n  //  const radius = rect.width / 2;\n  //\n  //  const distance = Math.sqrt((x - cx) ** 2 + (y - cy));\n  //  return distance >= radius - BORDER_WIDTH && distance <= radius;\n  //};\n  //\n  //const handleMouseDown = (e) => {\n  //  setIsDragging(true);\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  if (!isOnBorder(e.clientX, e.clientY, rect)) return;\n  //  startAngleRef.current = getAngle(\n  //    e.clientX,\n  //    e.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //};\n  //\n  //const handleMouseMove = (e) => {\n  //  if (!isDragging) return;\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  const currentAngle = getAngle(\n  //    e.clientX,\n  //    e.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //  if (startAngleRef.current !== null) {\n  //    const deltaAngle = currentAngle - startAngleRef.current;\n  //\n  //    if (deltaAngle > 5) {\n  //      setCurrentValue((prev) => prev + 1);\n  //      startAngleRef.current = currentAngle;\n  //    } else if (deltaAngle < -5) {\n  //      setCurrentValue((prev) => prev - 1);\n  //      startAngleRef.current = currentAngle;\n  //    }\n  //  }\n  //};\n  //\n  //const styleCircle = {\n  //  border: `${BORDER_WIDTH}px solid aqua`,\n  //};\n  //\n  //const handleMouseUp = () => {\n  //  setIsDragging(false);\n  //  startAngleRef.current = null;\n  //};\n  //const handleTouchStart = (e) => {\n  //  setIsDragging(true);\n  //\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  const touch = e.touches[0];\n  //  if (!isOnBorder(touch.clientX, touch.clientY, rect)) return;\n  //  startAngleRef.current = getAngle(\n  //    touch.clientX,\n  //    touch.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //};\n  //\n  //const handleTouchMove = (e) => {\n  //  if (!isDragging) return;\n  //  const rect = circleRef.current.getBoundingClientRect();\n  //  const touch = e.touches[0];\n  //  const currentAngle = getAngle(\n  //    touch.clientX,\n  //    touch.clientY,\n  //    rect.left + rect.width / 2,\n  //    rect.top + rect.height / 2,\n  //  );\n  //\n  //  if (startAngleRef.current !== null) {\n  //    const deltaAngle = currentAngle - startAngleRef.current;\n  //\n  //    if (deltaAngle > 5) {\n  //      setCurrentValue((prev) => prev + 1);\n  //      startAngleRef.current = currentAngle;\n  //    } else if (deltaAngle < -5) {\n  //      setCurrentValue((prev) => prev - 1);\n  //      startAngleRef.current = currentAngle;\n  //    }\n  //  }\n  //};\n  //\n  //const handleTouchEnd = () => {\n  //  setIsDragging(false);\n  //  startAngleRef.current = null;\n  //};\n\n  return (\n    <div className=\"wheel\">\n      <div\n        //{ style={styleCircle} }\n        id=\"circle\"\n        ref={circleRef}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        <span id=\"number\">{currentValue}</span>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAO,YAAY;AACnB,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAeoBACED,OAAA;IAAKE,SAAS,EAAC,OAAO;IAAAC,QAAA,eACpBH,OAAA;MACE;MACAI,EAAE,EAAC,QAAQ;MACXC,GAAG,EAAEC,SAAU;MACfC,WAAW,EAAEC,eAAgB;MAC7BC,WAAW,EAAEC,eAAgB;MAC7BC,SAAS,EAAEC,aAAc;MACzBC,YAAY,EAAED,aAAc;MAC5BE,YAAY,EAAEC,gBAAiB;MAC/BC,WAAW,EAAEC,eAAgB;MAC7BC,UAAU,EAAEC,cAAe;MAAAhB,QAAA,eAE3BH,OAAA;QAAMI,EAAE,EAAC,QAAQ;QAAAD,QAAA,EAAEiB;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACC,EAAA,GA5HuBxB,KAAK;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}